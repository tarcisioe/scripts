#!/bin/bash

source scriptlib-init

require main
require ui

SCRIPTLIB_ARGS="[TAR_FILE]"

SCRIPTLIB_INIT="\
Defuse a possible tarbomb: create a directory for its contents if it contains
more than one directory or file at top level."

SCRIPTLIB_POS_ARGS="\
    TAR_FILE   Path to the suspected tarbomb."


tar-basename() {
    # Get the name of a .tar.* file without the suffix.
    #
    # Usage: tar-basename TAR_FILE
    #
    # Positional arguments:
    #     TAR_FILE   Path to the .tar.* file.

    local tar_file="${1}"

    basename "${tar_file}" | sed -e 's/.tar.*$//g'
}


is-tarbomb() {
    # Check if a tar.* file is a tarbomb.
    # A tar file is a bomb if its contents don't have a directory as a unique
    # prefix.
    #
    # Usage: is-tarbomb TAR_FILE
    #
    # Positional arguments:
    #     TAR_FILE   Path to the .tar.* file.

    local tar_file="${1}"

    local nprefixes
    nprefixes="$(
        tar -tf "${tar_file}" |  # List file contents
        sed -e 's/\/.*$//' |  # Get directory prefixes (first thing up to a /)
        sort | uniq | wc -l  # Get the number of unique ones.
    )" &&

    echo $((${nprefixes} > 1))
}


get-output-directory() {
    # Get the output directory name to extract a tar file.
    # If it is not a bomb. It will be the same directory we are in.
    # If it is a bomb. It will be a directory named after its basename.
    #
    # Usage: get=output-directory TAR_FILE
    #
    # Positional arguments:
    #     TAR_FILE   Path to the .tar.* file.

    local tar_file="${1}"

    local is_bomb="$(is-tarbomb "${tar_file}")" &&

    ([[ "${is_bomb}" == 0 ]] || print-info "File '${tar_file}' is a tarbomb") &&

    choose "${is_bomb}" "./$(tar-basename "${tar_file}")" "."
}


_tardefuse() {
    # Defuse a tarbomb.
    #
    # Usage: tardefuse TAR_FILE
    #
    # Positional arguments:
    #     TAR_FILE   Path to the .tar.* file.

    local tar_file="${1:-}"

    [[ -n "${tar_file}" ]] || die-usage "Missing a file to extract."

    tar_file="$(readlink -f $1)"

    [[ -f "${tar_file}" ]] || die "File "${tar_file}" not found."

    local output_dir
    output_dir="$(get-output-directory "${tar_file}")"

    mkdir -p "${output_dir}" &&
    tar -xvf "${tar_file}" -C "${output_dir}"
}


main _tardefuse "$@"
