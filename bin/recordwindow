#!/bin/bash

source scriptlib-init

require dependencies
require util
require notify

OUTPUT="/tmp/output.mp4"
PIDFILE="/tmp/vshot.pid"


usage() {
echo "\
Usage: $(script-name) [OPTION...]
Record a window or a selected portion of a screen and send result to clipboard.

Optional arguments:
    -a/--audio   Capture audio.
    -h/--help    Print this help message and exit."
}


try-to-stop-capture() {
    kill $(<"${PIDFILE}") > /dev/null 2>&1 &&
        echo "Done capturing." ||
        log "Couldn't stop capture. Cleaning pidfile."
}


stop-capture-if-active() {
    # Stops capture if it is active.

    [[ ! -f "${PIDFILE}" ]] && return 1

    try-to-stop-capture &&
    rm "${PIDFILE}" &&

    xclip -sel c -t text/uri-list <<< "file://${OUTPUT}"
}


start-record() (
    # Starts capturing a region.
    #
    # Usage: start-record AUDIO X Y W H
    #
    # Positional arguments:
    #     AUDIO     A 0/1 flag to record audio or not.
    #     X Y H W   The x and y coordinates, height and width of a region of
    #               the screen.

    set -e

    local audio="${1}"
    local x="${2}"
    local y="${3}"
    local w="${4}"
    local h="${5}"

    local audio_flag="$(choose "${audio}" "-f pulse -ac 2 -i default" "")"

    ffmpeg -y -video_size "$(($w-1))x$(($h-1))" \
           -framerate 25 -f x11grab \
           -i :0.0+"${x}","${y}" \
           ${audio_flag} \
           -vf 'scale=trunc(iw/2)*2:-2' \
           -pix_fmt yuv420p \
           ${OUTPUT} > /dev/null 2>&1 &
    echo "${!}" >> "${PIDFILE}"
)


recordwindow() (
    # Starts or stops capturing a region.
    #
    # Usage: recordwindow AUDIO
    #
    # Positional arguments:
    #     AUDIO   A 0/1 flag to record audio or not.

    set -e

    local audio="${1}"

    stop-capture-if-active && return

    local x y w h g
    local slop_output
    slop_output="$(slop -f "%x %y %w %h")"
    read -r x y w h g <<< "${slop_output}"

    start-record "${audio}" "${x}" "${y}" "${w}" "${h}"
)


main() (
    set -e

    local audio=0

    local options
    options=$(getopt -o ha -l audio -- "$@")
    eval set -- "$options"

    while true; do
        case "$1" in
            -h|--help)
                usage && exit 0
                ;;
            -a|--audio)
                audio=1
                ;;
            --) shift ;&
            *) break ;;
        esac
        shift
    done

    recordwindow "${audio}"
)


check-dependencies ffmpeg slop xclip
wrap-shortcut main "$@"
